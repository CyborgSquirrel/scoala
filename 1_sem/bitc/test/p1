// m -- latimea fotografiei
// n -- inaltimea fotografiei
int m = 10, n = 4;
// a -- matricea cu fotografia
int a[15][15] = {
	{0, 1, 0, 1, 1, 1, 0, 0, 0, 1},
	{0, 0, 0, 1, 1, 0, 0, 0, 1, 1},
	{1, 0, 1, 0, 0, 0, 1, 0, 1, 0},
	{0, 0, 0, 1, 0, 0 ,0, 0, 1, 0},
}

int is_in_bounds(int i, int j){
	return j >= 0 && j < m && i >= 0 && i < n;
}

// vectori de directii pt flood fill
int di[] = {1, 0, -1, 0};
int dj[] = {0, 1, 0, -1};

// folosesc algoritmul flood fill ca sa scot toate valorile de 1 adiacente
void fill(int i, int j){
	a[i][j] = 0;
	for(int d = 0; d < 4; ++d){
		int ni = i+di[d];
		int nj = j+dj[d];
		if(is_in_bounds(ni, nj) && a[ni][nj]){
			fill(ni, nj);
		}
	}
}

void calculate(){
	int objects = 0;
	for(int i = 0; i < n; ++i){
		for(int j = 0; j < m; ++j){
			if(a[i][j]){
				fill(i, j);
				objects++;
			}
		}
	}
	printf("%d", objects);
}