void appendChar(char **p, char c){
	**p = c;
	(*p)++;
}

void appendInt(char **p, int a){
	// am pus in ordine big-endian byte-ii
	for(int i = 3; i >= 0; --i){
		appendChar(p, (a >> (8*i)) & 0xFF);
	}
}

char* packStudent(int count_studenti, struct student *sir_studenti[], int *returned_size) {
	// mai intai am calculat cati byte ocupa toate numele studentilor
	int nume_size = 0;
	for(int i = 0; i < count_studenti; ++i){
		nume_size += strlen(sir_studenti[i]->nume)+1;
	}
	
	*returned_size = sizeof(int) + sizeof(char) * 13 + sizeof(int) * 4 + nume_size;
	char *arr = (char*)malloc(*returned_size);
	
	// fiecare student din varianta codificata este format din 1*4 + 13*1 + 4*4 bytes + numarul de bytes ramasi pana la '\0'
	
	char *p = arr;
	for(int i = 0; i < count_studenti; ++i){
		struct student *s = sir_studenti[i];
		appendInt(&p, s->varsta);
		for(int j = 0; j < 13; ++j){
			appendChar(&p, s->cnp[j]);
		}
		for(int j = 0; j < 4; ++j){
			appendInt(&p, s->note[j]);
		}
		
		for(int j = 0; s->nume[j] != '\0'; ++j){
			appendChar(&p, s->nume[j]);
		}
		appendChar(&p, '\0');
	}
	return arr;
}
